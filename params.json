{"name":"GitHub Tutorial","tagline":"Learning Git is fun!","body":"# GitHub Tutorial\r\n\r\n_by David Amato_\r\n\r\n---\r\n## Git vs. GitHub\r\n###_Git:_\r\n* Git is *version control*, which means that Git controls and tracks changes of your code.\r\n* Git also runs in the command line, easy for editing code.\r\n* Use the command `git` `something` to tell Git what to do. \r\n\r\n###_Github:_\r\n* Github also runs in the command line.\r\n* Collaboration is a big part of Github, because people can make changes to someone else's project(s).\r\n* Visit `github.com`, sign up, and start editing code.\r\n\r\n###_Difference:_\r\n* Git is not on the cloud, meaning that you cannot save code with Git.\r\n* You can only save code, on the cloud, with Github.  \r\n\r\n\r\n---\r\n## Initial Setup\r\n###_Setting up your Github account:_\r\n* First, you must type your remote host on Github.\r\n* You have to type in your `username`, `email` and `password`to sign up.\r\n\r\n###_SSH Key:_\r\n* This key is found on your coding program/platform.\r\n* You can use it to connect your `localhost` with `Github`.\r\n* Just `Ctrl/Command-C` the SSH Key and `Ctrl/Command-V` it into your remote, \r\nin order to sync changes you make in your coding platform.\r\n\r\n###_Git Config:_\r\n* When you first initialize Git, it starts allowing you to use the command `git config`.\r\n* This lets you setup your `user.name` and `user.email`, so that when you make changes to code, Git will know who made those changes. \r\n\r\n\r\n---\r\n## Repository Setup\r\n###_Initializing Git:_\r\n* When you first connect your remote to your local, you have to use `git init`.\r\n* Use this in the command line in order to initialize Git.\r\n\r\n###_Add and Commit:_\r\n* When you first create a file, you need to save the changes.\r\n* Then you need to type `git add`, the file name and `git commit -m`.\r\n* By doing this, your saving any changes you have made to a specific file.\r\n\r\n###_First Github Repository:_\r\n* Once you setup your Github account, you are asked to create your first repository.\r\n* This is a folder or directory that holds all things that your create on your coding program, inside of it.\r\n* You are allowed to create an infinite amount of repositories on your Github account!\r\n\r\n###_Remote:_\r\n* Remember your Github? This is what your remote is!\r\n* A remote is basically just the program that allows you to track changes that you have made, or commits, in a specific repository.\r\n* So when you first set this up, you can use `git remote add [shortname] [URL]`.\r\n* This adds a remote to your local, or your coding platform.\r\n\r\n\r\n---\r\n## Workflow & Commands\r\n###_Status:_\r\n*  Do this frequently in order to know what files are added to the stage or _ready to take a snapshot_.\r\n*  Use `git status` to view added files.\r\n\r\n###_Adding files:_\r\n* Add changed files to the stage by typing `git add File Name Goes Here`.\r\n* This sets up the file to be saved, or _having the picture taken_.\r\n\r\n###_Commiting files:_\r\n* This takes a picture or snapshot of the file\r\n* Use `git commit -m File Name (from stage) Goes Here`, to _take a picture_.\r\n\r\n###_Pushing files:_\r\n* This just _pushes_ all changes/commits you have made to your remote repository.\r\n* If you go on Github, you will see any commits you have made on your machine.\r\n     \r\n This is what the process would look like:\r\n     ```\r\n     add File Name Here\r\n     git status\r\n     git commmit -m \"Short Message\"\r\n     git push\r\n     ```\r\n\r\n\r\n\r\n---\r\n## Collaboration:\r\n###_Forking & Cloning:_\r\n1. First, In order to fork, you must click on the fork on Github, which takes someone else's repository,\r\nand places it in your remote account (in this case Github)!\r\n2. After forking, go back to the repo page and clone the repo.\r\n3. Then, copy/paste the clone URL into your local coding platform.\r\n4. Thats all, just change the files in the repository that you cloned and push the commits/changes up to the original owner for approval.\r\n\r\n###_Pull & Pull Requests:_\r\n1. After pulling or pushing changes up to Github, you have to wait for the owner's approval.\r\n2. If accepted, then you can change code, or even give suggestions to the owner on what should be changed.\r\n3. Then, if the owner forks and clones your repo, then you can view and accept their changes.\r\n4. You can view their changes to your code by using the command `git pull`.\r\n5. Finally, just follow this process to collaborate easily. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}